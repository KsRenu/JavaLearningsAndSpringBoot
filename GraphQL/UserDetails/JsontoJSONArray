BankAccount Class:

package com.example.UserDetails;


import lombok.Builder;
import lombok.Getter;
import lombok.Value;

import java.util.UUID;

@Builder
@Value
public class BankAccount {

    UUID id;
    String name;
    Currency currency;
}



BankAccountResolver Class:
package com.example.UserDetails;

import graphql.kickstart.tools.GraphQLQueryResolver;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Slf4j
@Component
public class BankAccountResolver implements GraphQLQueryResolver{
    public BankAccount bankAccount(UUID id) {
        log.info("Retreiving bank accound id: {}",id);
        return BankAccount.builder()
                .id(id)
                .currency(Currency.USD)
                .name("Philip")
                .build();
//        return BankAccount.builder()
//                .id(id)
//               // .name("Philip")
//                .currency(Currency.USD)
//                .build();
    }
}





Client Class
package com.example.UserDetails;

import lombok.Builder;
import lombok.Value;

import java.util.UUID;

@Builder
@Value
public class Client {
    UUID id;
    String firstName;
    String lastName;

}




ClientResolver Class
package com.example.UserDetails;

import graphql.kickstart.tools.GraphQLResolver;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Slf4j
@Component
public class ClientResolver implements GraphQLResolver<BankAccount> {

    public Client client(BankAccount bankAccount){
        log.info("Requesting client data for bank account id {}",bankAccount.getId());
        return Client.builder()
                .id(UUID.randomUUID())
                .firstName("Philip")
                .lastName("Starritt").
                build();
    }
}



Currency Class
package com.example.UserDetails;

public enum Currency {
    CHF,
    USD
}



Schema
bankAccount(id : ID): BankAccount!



type BankAccount{
    id:ID!
    name: String!
    #client: Client!
    currency: Currency!
}
type Client{
    id: ID!
    firstName: String!
    lastName: String!
}
enum Currency{
    CHF
    USD
}



